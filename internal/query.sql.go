// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package internal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE Id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const deleteRoleType = `-- name: DeleteRoleType :exec
DELETE FROM role_types WHERE Id = $1
`

func (q *Queries) DeleteRoleType(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRoleType, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE Id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, userid, roletypeid, createdat FROM roles WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetRoleById(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Roletypeid,
		&i.Createdat,
	)
	return i, err
}

const getRoleTypeById = `-- name: GetRoleTypeById :one
SELECT id, title, createdat, accesslevel FROM role_types WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetRoleTypeById(ctx context.Context, id int32) (RoleType, error) {
	row := q.db.QueryRow(ctx, getRoleTypeById, id)
	var i RoleType
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Createdat,
		&i.Accesslevel,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, phone, password, birthday, createdat FROM users WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Birthday,
		&i.Createdat,
	)
	return i, err
}

const insertRole = `-- name: InsertRole :one
INSERT INTO roles (UserId, RoleTypeId) VALUES ($1, $2) RETURNING id, userid, roletypeid, createdat
`

type InsertRoleParams struct {
	Userid     int32
	Roletypeid int32
}

func (q *Queries) InsertRole(ctx context.Context, arg InsertRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, insertRole, arg.Userid, arg.Roletypeid)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Roletypeid,
		&i.Createdat,
	)
	return i, err
}

const insertRoleType = `-- name: InsertRoleType :one
INSERT INTO role_types (Title, AccessLevel) VALUES ($1, $2) RETURNING id, title, createdat, accesslevel
`

type InsertRoleTypeParams struct {
	Title       string
	Accesslevel Level
}

func (q *Queries) InsertRoleType(ctx context.Context, arg InsertRoleTypeParams) (RoleType, error) {
	row := q.db.QueryRow(ctx, insertRoleType, arg.Title, arg.Accesslevel)
	var i RoleType
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Createdat,
		&i.Accesslevel,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (Name, Email, Phone, Birthday) VALUES ($1,$2,$3,$4) RETURNING id, name, email, phone, password, birthday, createdat
`

type InsertUserParams struct {
	Name     string
	Email    pgtype.Text
	Phone    pgtype.Text
	Birthday pgtype.Date
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Birthday,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Birthday,
		&i.Createdat,
	)
	return i, err
}

const listRoleTypes = `-- name: ListRoleTypes :many
SELECT id, title, createdat, accesslevel FROM role_types
`

func (q *Queries) ListRoleTypes(ctx context.Context) ([]RoleType, error) {
	rows, err := q.db.Query(ctx, listRoleTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleType
	for rows.Next() {
		var i RoleType
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Createdat,
			&i.Accesslevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT id, userid, roletypeid, createdat FROM roles
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Roletypeid,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, phone, password, birthday, createdat FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Password,
			&i.Birthday,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, name, email, phone, password, birthday, createdat FROM users WHERE Name ILIKE $1 OR Email ILIKE $1 OR Phone ILIKE 1
`

func (q *Queries) SearchUsers(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Password,
			&i.Birthday,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
